angular.module("kitchenFriend",["ui.router"]).config(["$stateProvider","$urlRouterProvider",function(e,i){e.state("Login",{url:"/login",templateUrl:"html/views/login.html",controller:"loginCtrl"}).state("Home",{url:"/home",templateUrl:"html/views/userHome.html",controller:"userHomeCtrl"}).state("Recipes",{url:"/recipes",templateUrl:"html/views/userRecipes.html",controller:"userRecipesCtrl"}).state("NewRecipe",{url:"/newRecipe",templateUrl:"html/views/newRecipe.html",controller:"newRecipeCtrl"}).state("UserAccount",{url:"/userAccount",templateUrl:"html/views/userAccount.html",controller:"userAccountCtrl"}).state("BrowseRecipes",{url:"/browse",templateUrl:"html/views/browseRecipes.html",controller:"browseRecipesCtrl"}).state("Recipe",{url:"/recipe/:recipeId",templateUrl:"html/views/recipe.html",controller:"recipeCtrl"}).state("RecipeEdit",{url:"/editRecipe/:recipeId",templateUrl:"html/views/recipeEdit.html",controller:"recipeEditCtrl"}).state("RecipeShare",{url:"/shareRecipe/:recipeId",templateUrl:"html/views/recipeShare.html",controller:"recipeShareCtrl"}).state("RecipePublic",{url:"/publicRecipe/:recipeId",templateUrl:"html/views/recipePublic.html",controller:"recipePublicCtrl"}),i.otherwise("/login")}]),angular.module("kitchenFriend").controller("browseRecipesCtrl",["$scope","publicRecipeService",function(e,i){i.getPublicRecipes().then(function(i){e.recipes=i})}]),angular.module("kitchenFriend").controller("cookCtrl",["$scope","recipeService",function(e,i){i.getCookedRecipes().then(function(i){e.recipes=i})}]),angular.module("kitchenFriend").controller("loginCtrl",["$scope","$location","authService",function(e,i,t){e.localLogin=function(e){console.log("Logging in as: ",e),t.localLogin(e).then(function(e){e&&(console.log("redirecting"),i.path("/home"))})["catch"](function(e){console.log("Login Error: ",e)})},e.localSignup=function(e){console.log("Signup up locally with: ",e),t.createLocalUser(e).then(function(e){e&&console.log("Account Created")})["catch"](function(e){console.log("Account not created"),"Username already exists."===e.data&&window.alert("Username in use, please try again.")})}}]),angular.module("kitchenFriend").controller("newRecipeCtrl",["$scope",function(e){}]),angular.module("kitchenFriend").controller("recipeCtrl",["$scope","$stateParams","recipeService",function(e,i,t){e.isLoading=!0,t.getRecipeById(i.recipeId).then(function(i){e.recipe=i,e.isLoading=!1,console.log("GOT RECIPE: ",i)})}]),angular.module("kitchenFriend").controller("recipeEditCtrl",["$scope","$state","$stateParams","recipeService",function(e,i,t,n){t.recipeId?n.getRecipeById(t.recipeId).then(function(i){e.recipe=i}):(console.log("Could not find recipe Id"),i.go("Home")),e.saveChanges=function(){n.updateRecipe(e.recipe).then(function(e){i.go("Recipe",{recipeId:e._id})})}}]),angular.module("kitchenFriend").controller("recipePublicCtrl",["$scope","publicRecipeService","$stateParams",function(e,i,t){i.getPublicRecipeById(t.recipeId).then(function(i){e.recipe=i,e.isLoading=!1,console.log("GOT RECIPE: ",i)})}]),angular.module("kitchenFriend").controller("recipeShareCtrl",["$scope","$state","$stateParams","recipeService","shareService","publicRecipeService",function(e,i,t,n,r,c){n.getRecipeById(t.recipeId).then(function(i){e.recipe=i}),e.currentView=0,e.shareRecipePublic=function(){e.termsCheck&&c.shareNewRecipe(e.recipe).then(function(){i.go("BrowseRecipes")})},e.shareRecipeWithUser=function(e){console.log("Shareing",e),e.recipeId=t.recipeId,r.shareUser(e).then(function(){i.go("Home")})["catch"](function(e){console.log("FOUND THE ERROR: ",e),"User does not exist"===e.data.message&&alert("Sorry, that user does not exist.")})},e.shareWithEmail=function(t){t.recipe=e.recipe,r.shareEmail().then(function(){i.go("Home")})}}]),app.controller("shoppingListCtrl",["$scope",function(e){e.shoppingList=[]}]),angular.module("kitchenFriend").controller("userAccountCtrl",["$scope",function(e){}]),angular.module("kitchenFriend").controller("userHomeCtrl",["$scope","shareService",function(e,i){i.getUsersMail().then(function(i){e.allMail=i.recipeShares,console.log("mail: ",i.recipeShares)}),e.deleteFunction=function(i){for(var t=0;t<e.allMail.length;t++)e.allMail[t].recipeId._id===i&&e.allMail.splice(t,1)}}]),angular.module("kitchenFriend").controller("userRecipesCtrl",["$scope","recipeService",function(e,i){var t=function(){i.getCurrentUsersRecipes().then(function(i){e.recipes=i.recipes})};t()}]),angular.module("kitchenFriend").directive("myHeader",function(){return{templateUrl:"html/templates/header.html",scope:{forceAuth:"@"},controller:["$scope","authService","$state",function(e,i,t){e.loggedIn=!1,i.getAuth().then(function(i){e.loggedIn=!0,console.log("User logged in: ",i)})["catch"](function(i){e.loggedIn=!1,console.log("No user logged in",e.forceAuth),e.forceAuth&&t.go("Login")}),e.logout=function(){i.logout().then(function(e){t.go("Login")})}}]}}),angular.module("kitchenFriend").directive("loading",function(){return{template:'<p ng-show="isloading">Loading...</p>',scope:{isLoading:"="}}}),angular.module("kitchenFriend").directive("newLinkRecipe",function(){return{templateUrl:"html/templates/newLinkRecipe.html",link:function(e,i,t){e.loading=!1,e.couldNotFindRecipe=!1,e.foundRecipe=!1,e.findRecipe=function(i){e.loading=!0},e.saveRecipe=function(e){console.log("Saving")}}}}),angular.module("kitchenFriend").directive("newUserRecipe",["recipeService","$state",function(e,i){return{templateUrl:"html/templates/newUserRecipe.html",scope:{},link:function(t,n,r){t.newRecipe={ingredients:[],directions:[]},t.addIngredient=function(e){t.newRecipe.ingredients.push(e),t.newIngredient=""},t.removeIngredient=function(e){t.newRecipe.ingredients.splice(e,1)},t.orderIngredient=function(e,i){var n=t.newRecipe.ingredients[e];t.newRecipe.ingredients[e]=t.newRecipe.ingredients[e+i],t.newRecipe.ingredients[e+i]=n},t.addDirection=function(e){t.newRecipe.directions.push(e),t.newDirection=""},t.removeDirection=function(e){t.newRecipe.directions.splice(e,1)},t.orderDirection=function(e,i){var n=t.newRecipe.directions[e];t.newRecipe.directions[e]=t.newRecipe.directions[e+i],t.newRecipe.directions[e+i]=n},t.saveRecipe=function(){c()&&(console.log("Recipe Passed Validation"),e.saveNewRecipe(t.newRecipe).then(function(e){console.log("Recipe Saved"),i.go("Recipes")}))};var c=function(){return t.newRecipe.name?t.newRecipe.description?null===t.newRecipe.prepTime?(console.log("Prep Time Failed"),!1):null===t.newRecipe.cookTime?(console.log("Cook Time Failed"),!1):t.newRecipe.ingredients?t.newRecipe.directions?!0:(console.log("Directions Failed"),!1):(console.log("Ingredients Failed"),!1):(console.log("Description Failed"),!1):(console.log("Name Failed"),!1)}}}}]),angular.module("kitchenFriend").directive("recipeFull",function(){return{templateUrl:"html/templates/recipeFull.html"}}),angular.module("kitchenFriend").directive("recipeInteractions",["recipeService",function(e){return{templateUrl:"html/templates/recipeInteractions.html",scope:{recipeId:"=",layout:"@"},controller:["$scope","$state",function(i,t){i.classStuff={"recipe-interactions-expanded-fixed":"expanded-fixed"===i.layout},i.editRecipe=function(){i.recipeId&&t.go("RecipeEdit",{recipeId:i.recipeId})},i.shareRecipe=function(){i.recipeId&&t.go("RecipeShare",{recipeId:i.recipeId})},i.deleteRecipe=function(){window.confirm("Are you sure you want to delete this recipe?")&&i.recipeId&&e.deleteRecipe(i.recipeId).then(function(e){t.go("Recipes")})},i.printRecipe=function(){alert("Not Finished Yet")}}]}}]),angular.module("kitchenFriend").directive("recipeMail",function(){return{templateUrl:"html/templates/recipeMail.html",scope:{mail:"=",deleteFunction:"&delete"},controller:["$scope","shareService","$state",function(e,i,t){e.message=e.mail,console.log("MESSAGE: ",e.message),e.acceptMail=function(t){i.acceptShare(t).then(function(){console.log("refresh needed: ",t),e.deleteFunction({recipeId:t})})},e.rejectMail=function(t){console.log("REJECTING"),i.rejectShare(t).then(function(i){console.log("refresh Needed from rejecting: ",i),e.deleteFunction({recipeId:t})})}}]}}),angular.module("kitchenFriend").directive("recipePreview",function(){return{templateUrl:"html/templates/recipePreview.html",scope:{recipe:"=",browse:"@"},controller:["$scope","$state",function(e,i){e.openRecipe=function(){console.log("CLICKED VIEW WITH: ",e.browse),e.browse?i.go("RecipePublic",{recipeId:e.recipe._id}):i.go("Recipe",{recipeId:e.recipe._id})}}]}}),angular.module("kitchenFriend").service("authService",["$http",function(e){this.createLocalUser=function(i){return e({method:"POST",url:"/auth/signup",data:i})},this.localLogin=function(i){return e({method:"POST",url:"/auth/local",data:i})},this.getAuth=function(){return e({method:"GET",url:"/auth/current"})},this.logout=function(){return e({method:"GET",url:"/auth/logout"})}}]),angular.module("kitchenFriend").service("publicRecipeService",["$http",function(e){var i=function(e){return e.data};this.getPublicRecipes=function(){return e({method:"GET",url:"/api/publicRecipes"}).then(i)},this.shareNewRecipe=function(t){return e({method:"POST",url:"/api/share/public",data:t}).then(i)},this.getPublicRecipeById=function(t){return e({method:"GET",url:"/api/publicRecipes/"+t}).then(i)}}]),angular.module("kitchenFriend").service("recipeService",["$http",function(e){this.getCurrentUsersRecipes=function(){return e({method:"GET",url:"/api/recipes"}).then(i)},this.saveNewRecipe=function(t){return e({method:"POST",url:"/api/recipes",data:t}).then(i)},this.getRecipeById=function(t){return e({method:"GET",url:"/api/recipe/"+t}).then(i)},this.updateRecipe=function(t){return e({method:"PUT",url:"/api/updateRecipe",data:t}).then(i)},this.deleteRecipe=function(t){return e({method:"DELETE",url:"/api/recipe/"+t}).then(i)};var i=function(e){return e.data}}]),angular.module("kitchenFriend").service("shareService",["$http",function(e){this.shareUser=function(t){return e({method:"POST",url:"/api/share/user",data:t}).then(i)},this.shareEmail=function(t){return e({method:"POST",url:"/api/share/email",data:t}).then(i)},this.getUsersMail=function(){return e({method:"GET",url:"/api/share"}).then(i)},this.acceptShare=function(t){return console.log("Sending Id: ",t),e({method:"PUT",url:"/api/share/accept/"+t}).then(i)},this.rejectShare=function(t){return e({method:"PUT",url:"/api/share/reject/"+t}).then(i)};var i=function(e){return e.data}}]),app.service("shoppingListService",["$http",function(e){var i=function(e){return e.data},t=function(e){return console.error(e),null};this.getUsersList=function(n){var r="/api/shoppingList";return n&&(r+="?userId="+n),e({method:"GET",url:r}).then(i)["catch"](t)},this.addItemToList=function(n){return e({method:"POST",url:"/api/shoppingList",data:n}).then(i)["catch"](t)},this.removeItemFromList=function(n){return e({method:"DELETE",url:"/api/shoppingList",data:n}).then(i)["catch"](t)}}]);